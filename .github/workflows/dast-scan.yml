name: OWASP ZAP Scan

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  zap_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start web server
        run: |
          # Start a simple web server to serve the application
          python3 -m http.server 3000 &
          WEB_PID=$!
          echo "WEB_PID=$WEB_PID" >> $GITHUB_ENV
          echo "Web server started on port 3000 with PID $WEB_PID"
          sleep 5

      - name: Start ZAP daemon
        run: |
          # Start ZAP with network access to host
          docker run -u zap -d --network="host" -v $(pwd):/zap/wrk/:rw --name zap ghcr.io/zaproxy/zaproxy:stable zap.sh -daemon -port 8080 -host 0.0.0.0 -config api.disablekey=true

      - name: Wait for ZAP to start
        run: sleep 15

      - name: Test web server accessibility
        run: |
          echo "Testing if web server is accessible..."
          curl -I http://localhost:3000 || echo "Web server not accessible"
          echo "Checking if ZAP can reach the web server..."
          docker exec zap curl -I http://localhost:3000 || echo "ZAP cannot reach web server"

      - name: Run ZAP Baseline Scan
        run: |
          echo "Starting ZAP baseline scan..."
          # Run ZAP baseline scan with verbose output
          docker exec zap zap-baseline.py -t http://localhost:3000 -r /zap/wrk/testreport.html -J /zap/wrk/testreport.json -x /zap/wrk/testreport.xml -v || echo "ZAP scan failed"
          echo "ZAP scan command completed"
          
          # Check what files were actually created
          echo "Files created in /zap/wrk/:"
          docker exec zap ls -la /zap/wrk/ | grep -E "(testreport|\.html|\.json|\.xml)" || echo "No report files found"

      - name: Stop web server
        run: |
          # Stop the web server
          if [ ! -z "$WEB_PID" ]; then
            kill $WEB_PID || true
            echo "Web server stopped"
          fi

      - name: List files in working directory
        run: |
          echo "Files in current directory:"
          ls -la
          echo "Files in /zap/wrk inside container:"
          docker exec zap ls -la /zap/wrk/

      - name: Copy reports from container
        run: |
          # Copy all report files from container
          docker cp zap:/zap/wrk/testreport.html ./testreport.html || echo "HTML report not found"
          docker cp zap:/zap/wrk/testreport.json ./testreport.json || echo "JSON report not found"
          docker cp zap:/zap/wrk/testreport.xml ./testreport.xml || echo "XML report not found"
          
          # List what we actually have
          echo "Available report files:"
          ls -la testreport.* || echo "No report files found"

      - name: Create fallback report if ZAP failed
        run: |
          # If no reports were generated, create a basic one
          if [ ! -f "testreport.html" ]; then
            echo "Creating fallback security report..."
            echo '<!DOCTYPE html>' > testreport.html
            echo '<html><head><title>ZAP Security Scan Report</title>' >> testreport.html
            echo '<style>body{font-family:Arial,sans-serif;margin:20px;}' >> testreport.html
            echo '.header{background:#f0f0f0;padding:20px;border-radius:5px;}' >> testreport.html
            echo '.warning{background:#fff3cd;border:1px solid #ffeaa7;padding:15px;margin:10px 0;border-radius:5px;}' >> testreport.html
            echo '.info{background:#d1ecf1;border:1px solid #bee5eb;padding:15px;margin:10px 0;border-radius:5px;}' >> testreport.html
            echo '</style></head><body>' >> testreport.html
            echo '<div class="header"><h1>üîí ZAP Security Scan Report</h1>' >> testreport.html
            echo '<p><strong>Scan Date:</strong> '$(date)'</p>' >> testreport.html
            echo '<p><strong>Target:</strong> http://localhost:3000</p></div>' >> testreport.html
            echo '<div class="warning"><h2>‚ö†Ô∏è Scan Status</h2>' >> testreport.html
            echo '<p>ZAP was unable to complete the security scan. This could be due to:</p>' >> testreport.html
            echo '<ul><li>Network connectivity issues between ZAP and the target application</li>' >> testreport.html
            echo '<li>Target application not responding properly</li>' >> testreport.html
            echo '<li>ZAP configuration issues</li></ul></div>' >> testreport.html
            echo '<div class="info"><h2>üìã Recommendations</h2>' >> testreport.html
            echo '<ul><li>Verify the target application is running and accessible</li>' >> testreport.html
            echo '<li>Check ZAP logs for detailed error information</li>' >> testreport.html
            echo '<li>Consider running ZAP in interactive mode for debugging</li>' >> testreport.html
            echo '<li>Ensure proper network configuration between ZAP and target</li></ul></div>' >> testreport.html
            echo '<div class="info"><h2>üîß Next Steps</h2>' >> testreport.html
            echo '<p>To resolve this issue:</p>' >> testreport.html
            echo '<ol><li>Check the GitHub Actions logs for detailed error messages</li>' >> testreport.html
            echo '<li>Verify the web server is running on port 3000</li>' >> testreport.html
            echo '<li>Test ZAP connectivity manually</li>' >> testreport.html
            echo '<li>Consider using a different ZAP scanning approach</li></ol></div>' >> testreport.html
            echo '</body></html>' >> testreport.html
            echo "Fallback report created: testreport.html"
          fi

      - name: Upload ZAP Reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: testreport.*
          if-no-files-found: warn
